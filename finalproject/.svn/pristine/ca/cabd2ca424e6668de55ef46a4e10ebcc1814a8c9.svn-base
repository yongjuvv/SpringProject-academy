package com.ch.project.controller;

import java.io.UnsupportedEncodingException;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

import com.ch.project.model.Hashtag;
import com.ch.project.model.Movie;
import com.ch.project.model.PMember;
import com.ch.project.model.Review;
import com.ch.project.model.Tv;
import com.ch.project.service.HashtagService;
import com.ch.project.service.MovieService;
import com.ch.project.service.PMemberService;
import com.ch.project.service.ReviewService;
import com.ch.project.service.TvService;

@Controller
public class ReviewController {

	@Autowired
	private ReviewService rs;
	@Autowired
	private MovieService ms;
	@Autowired
	private HashtagService hs;
	@Autowired
	private PMemberService ps;
	@Autowired
	private TvService ts;
	
	@RequestMapping("test")
	public String test() {
		return "test";
	}
	
	@RequestMapping("main")
	public String main() {
		return "main";
	}
	
	// ----------------------------- 영 화 리 뷰 작 성 F O R M -----------------------------
	@RequestMapping("movReviewInsertForm")
	public String movReviewInsertForm(HttpSession session, int movNum, Model model) {
		
		/* 세션 체크 */
		String email = (String) session.getAttribute("email");
		if (email != null) {
		
		/* 해시태그 전체 목록 */
		List<Hashtag> list = hs.allList();
		
		/* 영화 번호로 영화 이름 가져오기 */
		Movie movie = ms.select(movNum);
		
		/* return될 [movInsertForm.jsp]로 보낼 데이터: 이메일, 해시태그 목록, 영화번호 */
		model.addAttribute("list", list);
		model.addAttribute("email", email);
		model.addAttribute("movie", movie);
		}
		
		return "review/movInsertForm";
	}

	// ----------------------------- 영 화 리 뷰 S U B M I T -----------------------------	
	@RequestMapping("movReviewSubmit")
	public String movReviewSubmit(HttpServletRequest request, Review review, Model model) {
		
		/* 한글 인코딩 */
		try {
			request.setCharacterEncoding("utf-8");
		} catch (UnsupportedEncodingException e) {
			System.out.println(e.getMessage());
		}
		
		/* 해시태그 */
		String[] hashtags = request.getParameterValues("hashtags");
		switch (hashtags.length) {
		case 1: // 선택된 해시태그 갯수: 1개
			review.setHashNum1(Integer.parseInt(hashtags[0]));
			break;
		case 2: // 선택된 해시태그 갯수: 2개
			review.setHashNum1(Integer.parseInt(hashtags[0]));
			review.setHashNum2(Integer.parseInt(hashtags[1]));
			break;
		case 3: // 선택된 해시태그 갯수: 3개
			review.setHashNum1(Integer.parseInt(hashtags[0]));
			review.setHashNum2(Integer.parseInt(hashtags[1]));
			review.setHashNum3(Integer.parseInt(hashtags[2]));
			break;
		default:
			break;
		}
		
		/* 스포일러 */
		int result = 0;
		if (review.getReviewSpoiler() == null) { // 스포일러 X
			result = rs.movInsertNoSpoiler(review);
		} else if (review.getReviewSpoiler().equals("y")) { // 스포일러 O
			result = rs.movInsertSpoiler(review);
		}
		model.addAttribute("result", result);
		
		/* return될 [insertSubmit.jsp] 로 보낼 데이터: 영화번호 */
		model.addAttribute("movNum", review.getMovNum());
		
		return "review/movInsertSubmit";
	}
	
	// 내가 쓴 리뷰 목록
	@RequestMapping("myReviewList")
	public String myReviewList(HttpSession session, HttpServletRequest request, Model model) {
		
		/* 세션 체크 */
		String email = (String) session.getAttribute("email");
		if (email != null) {
			
			/* 페이징 시작 */
			int rowPerPage = 5;
			int pagePerBlock = 5;
			String pageNum = request.getParameter("pageNum");
			if (pageNum == null || pageNum.equals(""))
				pageNum = "1";
			int currentPage = Integer.parseInt(pageNum);
			int startRow = (currentPage - 1) * rowPerPage + 1;
			int endRow = startRow + rowPerPage - 1;
			/* 페이징 끝 */
			
			/* 멤버 닉네임 */
			PMember pmember = ps.select(email);
			
			/* 리뷰 목록 */
			List<Review> list2 = rs.list2(email, startRow, endRow);
			
			/* 리뷰에 남긴 해시태그 */
			for (Review re : list2) {
				re.setHashName1(hs.getHashName(re.getHashNum1()));
				re.setHashName2(hs.getHashName(re.getHashNum2()));
				re.setHashName3(hs.getHashName(re.getHashNum3()));
			}
			
			/* 페이징 시작 */
			int tot = rs.total(email);
			int total = tot - startRow + 1;
			int startPage = currentPage - (currentPage - 1) % pagePerBlock;
			int endPage = startPage + pagePerBlock - 1;
			int totPage = (int) Math.ceil((double) tot / rowPerPage);
			if (endPage > totPage)
				endPage = totPage;
			/* 페이징 끝 */
			
			model.addAttribute("email", email);
			model.addAttribute("pmember", pmember);
			model.addAttribute("list2", list2);
			model.addAttribute("total", total);
			model.addAttribute("startPage", startPage);
			model.addAttribute("endPage", endPage);
			model.addAttribute("totPage", totPage);
			model.addAttribute("currentPage", currentPage);
			model.addAttribute("pagePerBlock", pagePerBlock);
			model.addAttribute("pageNum", pageNum);
		}

		return "review/myReviewList";
	}
	
	// 영화 리뷰 수정 FORM
	@RequestMapping("movUpdateForm")
	public String movReviewupdateForm(HttpSession session, HttpServletRequest request,
			int movNum, Model model) {
		
		/* 세션 체크 */
		String email = (String) session.getAttribute("email");
		if (email != null) {
		
			/* 한글 인코딩 */
			try {
				request.setCharacterEncoding("utf-8");
			} catch (UnsupportedEncodingException e) {
				System.out.println(e.getMessage());
			}
			
			/* 작성된 코멘트 불러오기 */
			Review review = rs.selectMovReview(email, movNum);
			model.addAttribute("review", review);
			
			/* 해시태그 전체 목록 */
			List<Hashtag> list = hs.allList();
			model.addAttribute("list", list);
			
			/* 영화 번호로 영화 이름 가져오기 */
			Movie movie = ms.select(movNum);
			model.addAttribute("movie", movie);
		}
		
		return "review/movUpdateForm";
	}
	
	// 영화 리뷰 수정 SUBMIT
	@RequestMapping("movReviewUpdate")
	public String movReviewUpdate(HttpServletRequest request, Review review, Model model) {
			
		/* 한글 인코딩 */
		try {
			request.setCharacterEncoding("utf-8");
		} catch (UnsupportedEncodingException e) {
			System.out.println(e.getMessage());
		}
			
		/* 해시태그 */
		String[] hashtags = request.getParameterValues("hashtags");
		switch (hashtags.length) {
		case 1: // 선택된 해시태그 갯수: 1개
			review.setHashNum1(Integer.parseInt(hashtags[0]));
			break;
		case 2: // 선택된 해시태그 갯수: 2개
			review.setHashNum1(Integer.parseInt(hashtags[0]));
			review.setHashNum2(Integer.parseInt(hashtags[1]));
			break;
		case 3: // 선택된 해시태그 갯수: 3개
			review.setHashNum1(Integer.parseInt(hashtags[0]));
			review.setHashNum2(Integer.parseInt(hashtags[1]));
			review.setHashNum3(Integer.parseInt(hashtags[2]));
			break;
		default:
			break;
		}
			
		/* 스포일러 */
		int result = 0;
		if (review.getReviewSpoiler() == null) { // 스포일러 X
			result = rs.MovUpdateNoSpoiler(review);
		} else if (review.getReviewSpoiler().equals("y")) { // 스포일러 O
			result = rs.MovUpdateSpoiler(review);
		}
		model.addAttribute("result", result);
			
		/* return될 [insertSubmit.jsp] 로 보낼 데이터: 영화번호 */
		model.addAttribute("movNum", review.getMovNum());
			
		return "review/movUpdateSubmit";
	}
	
	// 영화 리뷰 삭제 확인
	@RequestMapping("movReviewDeleteChk")
	public String movDelete(HttpSession session, int movNum, Model model) {
		
		/* 세션 체크 */
		String email = (String) session.getAttribute("email");
		
		if (email != null) {
		model.addAttribute("movNum", movNum);
		}

		return "review/movDeleteChk";
	}
	
	// 영화 리뷰 삭제
	@RequestMapping("movReviewDelete")
	public String reviewDelete(HttpSession session, int movNum, Model model) {
		
		/* 세션 체크 */
		String email = (String) session.getAttribute("email");
		
		if (email != null) {
			int result = 0;
			result = rs.movDelete(email, movNum);

		model.addAttribute("movNum", movNum);
		model.addAttribute("result", result);
		}
		
		return "review/movDelete";
	}
	
	// ----------------------------- t v 리 뷰 '작 성' F O R M -----------------------------
	@RequestMapping("tvReviewInsertForm")
	public String tvReviewInsertForm(HttpSession session, int tvNum, Model model) {
		
		/* 세션 체크 */
		String email = (String) session.getAttribute("email");
		if (email != null) {
			/* 해시태그 전체 목록 */
			List<Hashtag> list = hs.allList();
			
			/* 영화 번호로 영화 이름 가져오기 */
			Tv tv = ts.select(tvNum);
			
			/* return될 [movInsertForm.jsp]로 보낼 데이터: 이메일, 해시태그 목록, 영화번호 */
			model.addAttribute("list", list);
			model.addAttribute("email", email);
			model.addAttribute("tv", tv);
		}
		return "review/tvInsertForm";
	}
	
	// ----------------------------- t v 리 뷰 S U B M I T -----------------------------
	@RequestMapping("tvReviewSubmit")
	public String tvReviewSubmit(HttpServletRequest request, Review review, Model model) {
		
		/* 한글 인코딩 */
		try {
			request.setCharacterEncoding("utf-8");
		} catch (UnsupportedEncodingException e) {
			System.out.println(e.getMessage());
		}
		

		/* 해시태그 */
		String[] hashtags = request.getParameterValues("hashtags");
		switch (hashtags.length) {
		case 1: // 선택된 해시태그 갯수: 1개
			review.setHashNum1(Integer.parseInt(hashtags[0]));
			break;
		case 2: // 선택된 해시태그 갯수: 2개
			review.setHashNum1(Integer.parseInt(hashtags[0]));
			review.setHashNum2(Integer.parseInt(hashtags[1]));
			break;
		case 3: // 선택된 해시태그 갯수: 3개
			review.setHashNum1(Integer.parseInt(hashtags[0]));
			review.setHashNum2(Integer.parseInt(hashtags[1]));
			review.setHashNum3(Integer.parseInt(hashtags[2]));
			break;
		default:
			break;
		}
		
		/* 스포일러 */
		int result = 0;
		if (review.getReviewSpoiler() == null) { // 스포일러 X
			result = rs.insertTvReviewNoSpoiler(review);
		} else if (review.getReviewSpoiler().equals("y")) { // 스포일러 O
			result = rs.insertTvReviewSpoiler(review);
		}
		model.addAttribute("result", result);
		
		/* return될 [insertSubmit.jsp] 로 보낼 데이터: 영화번호 */
		model.addAttribute("tvNum", review.getTvNum());
		
		return "review/tvInsertSubmit";
	}
	
	// ----------------------------- t v 리 뷰  '수 정' F O R M -----------------------------
	@RequestMapping("tvUpdateForm")
	public String tvUpdateForm(HttpSession session, HttpServletRequest request,
			int tvNum, Model model) {
			
		/* 세션 체크 */
		String email = (String) session.getAttribute("email");
		
		if (email != null) {
			
		/* 한글 인코딩 */
		try {
			request.setCharacterEncoding("utf-8");
		} catch (UnsupportedEncodingException e) {
			System.out.println(e.getMessage());
		}
		
		/* 작성된 코멘트 불러오기 */
		Review review = rs.selectTvReview(email, tvNum);
		model.addAttribute("review", review);
			
		/* 해시태그 전체 목록 */
		List<Hashtag> list = hs.allList();
		model.addAttribute("list", list);
			
		/* tv 번호로 tv 이름 가져오기 */
		Tv tv = ts.select(tvNum);
		model.addAttribute("tv", tv);
		}
		
		return "review/tvUpdateForm";
	}
		
	// tv 리뷰 수정
	@RequestMapping("tvReviewUpdate")
	public String tvReviewUpdate(HttpServletRequest request, Review review, Model model) {
			
		/* 한글 인코딩 */
		try {
			request.setCharacterEncoding("utf-8");
		} catch (UnsupportedEncodingException e) {
			System.out.println(e.getMessage());
		}
				
		/* 해시태그 */
		String[] hashtags = request.getParameterValues("hashtags");
		switch (hashtags.length) {
			case 1: // 선택된 해시태그 갯수: 1개
				review.setHashNum1(Integer.parseInt(hashtags[0]));
				break;
			case 2: // 선택된 해시태그 갯수: 2개
				review.setHashNum1(Integer.parseInt(hashtags[0]));
				review.setHashNum2(Integer.parseInt(hashtags[1]));
				break;
			case 3: // 선택된 해시태그 갯수: 3개
				review.setHashNum1(Integer.parseInt(hashtags[0]));
				review.setHashNum2(Integer.parseInt(hashtags[1]));
				review.setHashNum3(Integer.parseInt(hashtags[2]));
				break;
			default:
				break;
			}
			
		/* 스포일러 */
		int result = 0;
		if (review.getReviewSpoiler() == null) { // 스포일러 X
			result = rs.TvUpdateNoSpoiler(review);
		} else if (review.getReviewSpoiler().equals("y")) { // 스포일러 O
			result = rs.TvUpdateSpoiler(review);
		}
		model.addAttribute("result", result);
		
		/* return될 [insertSubmit.jsp] 로 보낼 데이터: 영화번호 */
		model.addAttribute("review", review);
			
		return "review/tvUpdateSubmit";
	}
	
	// tv 리뷰 삭제 확인
	@RequestMapping("tvReviewDeleteChk")
	public String tvReviewDeleteChk(HttpSession session, int tvNum, Model model) {
		
		/* 세션 체크 */
		String email = (String) session.getAttribute("email");
		
		if (email != null) {
		model.addAttribute("tvNum", tvNum);
		}

		return "review/tvDeleteChk";
	}
	
	// tv 리뷰 삭제
	@RequestMapping("tvReviewDelete")
	public String tvReviewDelete(HttpSession session, int tvNum, Model model) {
		
		/* 세션 체크 */
		String email = (String) session.getAttribute("email");
		
		if (email != null) {
			int result = 0;
			result = rs.tvDelete(email, tvNum);

		model.addAttribute("tvNum", tvNum);
		model.addAttribute("result", result);
		}
		
		return "review/tvDelete";
	}
}
